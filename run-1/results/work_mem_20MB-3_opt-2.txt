explain analyze SELECT n.id,
    n.primary_name,
    date_part('year', NOW())::int - n.birth_year AS age,
    count(*) AS roles
FROM name n
JOIN titlePrincipals tp ON tp.name_id = n.id
JOIN titlePrincipalsCharacters tpc ON tpc.title_id = tp.title_id
    AND tpc.name_id = tp.name_id
JOIN category c ON c.id = tp.category_id
JOIN title t ON t.id = tp.title_id
WHERE t.start_year >= date_part('year', NOW())::int - 10
    AND c.name = 'actress'
    AND n.death_year IS NULL
    AND t.title_type IN (
        'movie', 'tvSeries', 'tvMiniSeries', 'tvMovie'
    )
GROUP BY n.id
ORDER BY roles DESC
LIMIT 100;
                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1244153.87..1244153.90 rows=12 width=36) (actual time=33085.837..33113.800 rows=100 loops=1)
   ->  Sort  (cost=1244153.87..1244153.90 rows=12 width=36) (actual time=32568.764..32596.719 rows=100 loops=1)
         Sort Key: (count(*)) DESC
         Sort Method: top-N heapsort  Memory: 38kB
         ->  Finalize GroupAggregate  (cost=1244152.13..1244153.66 rows=12 width=36) (actual time=32284.068..32557.756 rows=183837 loops=1)
               Group Key: n.id
               ->  Gather Merge  (cost=1244152.13..1244153.37 rows=10 width=36) (actual time=32284.018..32458.096 rows=249923 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=1243152.10..1243152.19 rows=5 width=36) (actual time=32255.589..32328.734 rows=83308 loops=3)
                           Group Key: n.id
                           ->  Sort  (cost=1243152.10..1243152.12 rows=5 width=28) (actual time=32255.531..32283.494 rows=132116 loops=3)
                                 Sort Key: n.id
                                 Sort Method: quicksort  Memory: 13189kB
                                 Worker 0:  Sort Method: quicksort  Memory: 15201kB
                                 Worker 1:  Sort Method: quicksort  Memory: 15075kB
                                 ->  Nested Loop  (cost=233465.40..1243152.05 rows=5 width=28) (actual time=3689.321..32016.287 rows=132116 loops=3)
                                       ->  Nested Loop  (cost=233464.84..1243131.36 rows=5 width=20) (actual time=3664.348..16352.462 rows=132656 loops=3)
                                             ->  Hash Join  (cost=233464.28..997556.62 rows=92195 width=30) (actual time=3661.998..12414.896 rows=149480 loops=3)
                                                   Hash Cond: (tp.category_id = c.id)
                                                   ->  Parallel Hash Join  (cost=233463.12..993625.64 rows=1106340 width=34) (actual time=3378.333..12073.277 rows=766313 loops=3)
                                                         Hash Cond: ((tp.title_id)::text = (t.id)::text)
                                                         ->  Parallel Seq Scan on titleprincipals tp  (cost=0.00..699000.00 rows=23300000 width=24) (actual time=0.697..5631.932 rows=18639969 loops=3)
                                                         ->  Parallel Hash  (cost=231036.22..231036.22 rows=194152 width=10) (actual time=3330.503..3330.505 rows=117416 loops=3)
                                                               Buckets: 524288  Batches: 1  Memory Usage: 20672kB
                                                               ->  Parallel Seq Scan on title t  (cost=0.00..231036.22 rows=194152 width=10) (actual time=38.323..3261.143 rows=117416 loops=3)
                                                                     Filter: (((title_type)::text = ANY ('{movie,tvSeries,tvMiniSeries,tvMovie}'::text[])) AND (start_year >= ((date_part('year'::text, now()))::integer - 10)))
                                                                     Rows Removed by Filter: 3156125
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=237.001..237.002 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on category c  (cost=0.00..1.15 rows=1 width=4) (actual time=236.982..236.984 rows=1 loops=3)
                                                               Filter: ((name)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                             ->  Index Only Scan using titleprincipalscharacters_pkey on titleprincipalscharacters tpc  (cost=0.56..2.65 rows=1 width=20) (actual time=0.025..0.026 rows=1 loops=448441)
                                                   Index Cond: ((title_id = (tp.title_id)::text) AND (name_id = (tp.name_id)::text))
                                                   Heap Fetches: 0
                                       ->  Index Scan using name_pkey on name n  (cost=0.56..4.14 rows=1 width=28) (actual time=0.117..0.117 rows=1 loops=397968)
                                             Index Cond: ((id)::text = (tp.name_id)::text)
                                             Filter: (death_year IS NULL)
                                             Rows Removed by Filter: 0
 Planning Time: 22.799 ms
 JIT:
   Functions: 115
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 7.460 ms, Inlining 314.513 ms, Optimization 512.015 ms, Emission 402.061 ms, Total 1236.049 ms
 Execution Time: 33554.271 ms
(46 rows)


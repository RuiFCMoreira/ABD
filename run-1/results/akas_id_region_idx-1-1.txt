explain analyze SELECT *
FROM (
    SELECT t.id,
        left(t.primary_title, 30),
        ((start_year / 10) * 10)::int AS decade,
        avg(uh.rating) AS rating,
        rank() over (
            PARTITION by ((start_year / 10) * 10) :: int
            ORDER BY avg(uh.rating) DESC, t.id
        ) AS rank
    FROM title t
    JOIN userHistory uh ON uh.title_id = t.id
    WHERE t.title_type = 'movie'
        AND ((start_year / 10) * 10)::int >= 1980
        AND t.id IN (
            SELECT title_id
            FROM titleGenre tg
            JOIN genre g ON g.id = tg.genre_id
            WHERE g.name IN (
                'Drama'
            )
        )
        AND t.id IN (
            SELECT title_id
            FROM titleAkas
            WHERE region IN (
                'US', 'GB', 'ES', 'DE', 'FR', 'PT'
            )
        )
    GROUP BY t.id
    HAVING count(uh.rating) >= 3
    ORDER BY decade, rating DESC
) t_
WHERE rank <= 10;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on t_  (cost=366179.54..366196.58 rows=134 width=86) (actual time=11261.567..11285.839 rows=50 loops=1)
   Filter: (t_.rank <= 10)
   Rows Removed by Filter: 1953
   ->  WindowAgg  (cost=366179.54..366191.57 rows=401 width=86) (actual time=11261.562..11285.712 rows=2003 loops=1)
         ->  Sort  (cost=366179.54..366180.54 rows=401 width=66) (actual time=11261.504..11284.195 rows=2003 loops=1)
               Sort Key: (((t.start_year / 10) * 10)), (avg(uh.rating)) DESC, t.id
               Sort Method: quicksort  Memory: 228kB
               ->  Finalize GroupAggregate  (cost=366008.68..366162.20 rows=401 width=66) (actual time=11195.855..11280.338 rows=2003 loops=1)
                     Group Key: t.id
                     Filter: (count(uh.rating) >= 3)
                     Rows Removed by Filter: 40986
                     ->  Gather Merge  (cost=366008.68..366134.60 rows=1004 width=74) (actual time=11195.816..11248.361 rows=53920 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Partial GroupAggregate  (cost=365008.65..365018.69 rows=502 width=74) (actual time=11173.273..11187.884 rows=17973 loops=3)
                                 Group Key: t.id
                                 ->  Sort  (cost=365008.65..365009.91 rows=502 width=38) (actual time=11173.211..11176.593 rows=20226 loops=3)
                                       Sort Key: t.id
                                       Sort Method: quicksort  Memory: 2435kB
                                       Worker 0:  Sort Method: quicksort  Memory: 2388kB
                                       Worker 1:  Sort Method: quicksort  Memory: 2408kB
                                       ->  Parallel Hash Join  (cost=275537.71..364986.13 rows=502 width=38) (actual time=8473.465..11143.978 rows=20226 loops=3)
                                             Hash Cond: ((uh.title_id)::text = (t.id)::text)
                                             ->  Parallel Seq Scan on userhistory uh  (cost=0.00..80069.77 rows=2500777 width=14) (actual time=0.294..2064.060 rows=2000631 loops=3)
                                             ->  Parallel Hash  (cost=275534.09..275534.09 rows=290 width=54) (actual time=8472.824..8472.830 rows=27522 loops=3)
                                                   Buckets: 131072 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 9048kB
                                                   ->  Nested Loop Semi Join  (cost=1.26..275534.09 rows=290 width=54) (actual time=102.229..8345.196 rows=27522 loops=3)
                                                         Join Filter: ((t.id)::text = (tg.title_id)::text)
                                                         ->  Nested Loop Semi Join  (cost=0.56..263705.35 rows=5238 width=44) (actual time=76.769..6505.209 rows=78788 loops=3)
                                                               ->  Parallel Seq Scan on title t  (cost=0.00..200466.46 rows=92292 width=34) (actual time=70.415..2669.928 rows=129726 loops=3)
                                                                     Filter: (((title_type)::text = 'movie'::text) AND (((start_year / 10) * 10) >= 1980))
                                                                     Rows Removed by Filter: 3143815
                                                               ->  Index Only Scan using akas_id_region_idx on titleakas  (cost=0.56..4.30 rows=33 width=10) (actual time=0.029..0.029 rows=1 loops=389178)
                                                                     Index Cond: (title_id = (t.id)::text)
                                                                     Filter: ((region)::text = ANY ('{US,GB,ES,DE,FR,PT}'::text[]))
                                                                     Rows Removed by Filter: 1
                                                                     Heap Fetches: 0
                                                         ->  Nested Loop  (cost=0.70..2.25 rows=1 width=10) (actual time=0.023..0.023 rows=0 loops=236365)
                                                               ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..1.60 rows=4 width=14) (actual time=0.020..0.021 rows=1 loops=236365)
                                                                     Index Cond: (title_id = (titleakas.title_id)::text)
                                                                     Heap Fetches: 0
                                                               ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=327381)
                                                                     Index Cond: (id = tg.genre_id)
                                                                     Filter: ((name)::text = 'Drama'::text)
                                                                     Rows Removed by Filter: 1
 Planning Time: 25.713 ms
 JIT:
   Functions: 102
   Options: Inlining false, Optimization false, Expressions true, Deforming true
   Timing: Generation 8.046 ms, Inlining 0.000 ms, Optimization 7.898 ms, Emission 194.458 ms, Total 210.402 ms
 Execution Time: 11750.794 ms
(51 rows)


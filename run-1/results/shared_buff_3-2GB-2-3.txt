explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1131729.71..1131729.96 rows=100 width=74) (actual time=33026.541..33122.864 rows=100 loops=1)
   ->  Sort  (cost=1131729.71..1131737.94 rows=3291 width=74) (actual time=32410.689..32507.004 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 40kB
         ->  Finalize GroupAggregate  (cost=115990.44..1131603.93 rows=3291 width=74) (actual time=16747.085..32500.256 rows=21489 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=115990.44..1131543.60 rows=2742 width=74) (actual time=16747.041..32487.316 rows=26166 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=114990.41..1130227.09 rows=1371 width=74) (actual time=16715.932..31789.698 rows=8722 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=114990.41..1130199.67 rows=1371 width=66) (actual time=16715.899..31783.096 rows=11421 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 349  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 344  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 347  Sort Method: quicksort  Average Memory: 30kB  Peak Memory: 30kB
                                 ->  Merge Join  (cost=114249.42..1130137.97 rows=1371 width=66) (actual time=16708.113..31769.301 rows=11421 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=114248.71..114248.74 rows=9 width=44) (actual time=16630.072..16636.470 rows=11811 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 1468kB
                                             Worker 0:  Sort Method: quicksort  Memory: 1462kB
                                             Worker 1:  Sort Method: quicksort  Memory: 1467kB
                                             ->  Nested Loop  (cost=1.59..114248.57 rows=9 width=44) (actual time=318.380..16604.453 rows=11811 loops=3)
                                                   ->  Nested Loop  (cost=1.30..114211.49 rows=9 width=48) (actual time=318.325..16527.897 rows=11908 loops=3)
                                                         ->  Nested Loop  (cost=0.87..114023.90 rows=335 width=18) (actual time=316.795..12356.658 rows=12478 loops=3)
                                                               ->  Nested Loop  (cost=0.43..113756.55 rows=553 width=24) (actual time=315.224..6278.581 rows=17404 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111330.99 rows=553 width=14) (actual time=314.221..2551.105 rows=17404 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1983227
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.39 rows=1 width=10) (actual time=0.213..0.213 rows=1 loops=52212)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.348..0.348 rows=1 loops=52212)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.333..0.333 rows=1 loops=37434)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..4.12 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=35725)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..963172.39 rows=4216269 width=42) (actual time=0.684..14108.946 rows=9377752 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834474.73 rows=15198860 width=17) (actual time=0.649..7749.264 rows=15198118 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462079.46 rows=15198860 width=14) (actual time=0.588..2942.190 rows=15198118 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45594354)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15198094  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15198088  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15198088  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 16.153 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 10.045 ms, Inlining 312.309 ms, Optimization 707.103 ms, Emission 538.686 ms, Total 1568.144 ms
 Execution Time: 33558.453 ms
(65 rows)


explain analyze SELECT n.id,
    n.primary_name,
    date_part('year', NOW())::int - n.birth_year AS age,
    count(*) AS roles
FROM name n
JOIN titlePrincipals tp ON tp.name_id = n.id
JOIN titlePrincipalsCharacters tpc ON tpc.title_id = tp.title_id
    AND tpc.name_id = tp.name_id
JOIN category c ON c.id = tp.category_id
JOIN title t ON t.id = tp.title_id
WHERE t.start_year >= date_part('year', NOW())::int - 10
    AND c.name = 'actress'
    AND n.death_year IS NULL
    AND t.title_type IN (
        'movie', 'tvSeries', 'tvMiniSeries', 'tvMovie'
    )
GROUP BY n.id
ORDER BY roles DESC
LIMIT 100;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1273457.78..1273457.80 rows=11 width=36) (actual time=39852.098..39946.310 rows=100 loops=1)
   ->  Sort  (cost=1273457.78..1273457.80 rows=11 width=36) (actual time=39341.651..39435.854 rows=100 loops=1)
         Sort Key: (count(*)) DESC
         Sort Method: top-N heapsort  Memory: 38kB
         ->  GroupAggregate  (cost=1273457.28..1273457.59 rows=11 width=36) (actual time=39047.732..39396.146 rows=183837 loops=1)
               Group Key: n.id
               ->  Sort  (cost=1273457.28..1273457.31 rows=11 width=28) (actual time=39047.672..39275.898 rows=396348 loops=1)
                     Sort Key: n.id
                     Sort Method: external merge  Disk: 14304kB
                     ->  Gather  (cost=235403.52..1273457.09 rows=11 width=28) (actual time=13450.843..38610.366 rows=396348 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Nested Loop  (cost=234403.52..1272455.99 rows=5 width=28) (actual time=13425.944..38758.915 rows=132116 loops=3)
                                 ->  Nested Loop  (cost=234402.96..1272435.31 rows=5 width=20) (actual time=13424.417..22992.627 rows=132656 loops=3)
                                       ->  Parallel Hash Join  (cost=234402.40..1044930.82 rows=88783 width=30) (actual time=13418.275..14050.242 rows=149480 loops=3)
                                             Hash Cond: ((tp.title_id)::text = (t.id)::text)
                                             ->  Hash Join  (cost=1.16..781764.71 rows=1941667 width=20) (actual time=1.090..8838.408 rows=3185892 loops=3)
                                                   Hash Cond: (tp.category_id = c.id)
                                                   ->  Parallel Seq Scan on titleprincipals tp  (cost=0.00..699000.00 rows=23300000 width=24) (actual time=0.954..6953.542 rows=18639969 loops=3)
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.067..0.068 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on category c  (cost=0.00..1.15 rows=1 width=4) (actual time=0.060..0.061 rows=1 loops=3)
                                                               Filter: ((name)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                             ->  Parallel Hash  (cost=231147.84..231147.84 rows=187152 width=10) (actual time=3637.622..3637.623 rows=117416 loops=3)
                                                   Buckets: 131072  Batches: 8  Memory Usage: 3136kB
                                                   ->  Parallel Seq Scan on title t  (cost=0.00..231147.84 rows=187152 width=10) (actual time=257.290..3597.253 rows=117416 loops=3)
                                                         Filter: (((title_type)::text = ANY ('{movie,tvSeries,tvMiniSeries,tvMovie}'::text[])) AND (start_year >= ((date_part('year'::text, now()))::integer - 10)))
                                                         Rows Removed by Filter: 3156125
                                       ->  Index Only Scan using tpc_title_name_idx on titleprincipalscharacters tpc  (cost=0.56..2.55 rows=1 width=20) (actual time=0.059..0.059 rows=1 loops=448441)
                                             Index Cond: ((title_id = (tp.title_id)::text) AND (name_id = (tp.name_id)::text))
                                             Heap Fetches: 0
                                 ->  Index Scan using name_pkey on name n  (cost=0.56..4.14 rows=1 width=28) (actual time=0.118..0.118 rows=1 loops=397968)
                                       Index Cond: ((id)::text = (tp.name_id)::text)
                                       Filter: (death_year IS NULL)
                                       Rows Removed by Filter: 0
 Planning Time: 29.564 ms
 JIT:
   Functions: 104
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 6.713 ms, Inlining 290.370 ms, Optimization 496.511 ms, Emission 378.764 ms, Total 1172.359 ms
 Execution Time: 40380.104 ms
(42 rows)


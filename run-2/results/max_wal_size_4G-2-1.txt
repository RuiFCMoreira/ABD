explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1148383.74..1148383.99 rows=100 width=74) (actual time=28757.361..28757.479 rows=100 loops=1)
   ->  Sort  (cost=1148383.74..1148419.50 rows=14303 width=74) (actual time=28278.532..28278.643 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 40kB
         ->  GroupAggregate  (cost=126525.16..1147837.09 rows=14303 width=74) (actual time=15126.760..28273.177 rows=20634 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Nested Loop  (cost=126525.16..1147551.03 rows=14303 width=66) (actual time=15125.993..28260.030 rows=32521 loops=1)
                     ->  Gather Merge  (cost=126524.86..1136849.77 rows=14444 width=70) (actual time=15125.312..28044.347 rows=32785 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Incremental Sort  (cost=125524.83..1134182.55 rows=6018 width=70) (actual time=15103.202..27763.911 rows=10928 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 338  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 330  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 328  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=125357.23..1133911.74 rows=6018 width=70) (actual time=15097.244..27755.576 rows=10928 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=125356.53..125356.63 rows=42 width=48) (actual time=15038.800..15042.549 rows=11301 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 1550kB
                                             Worker 0:  Sort Method: quicksort  Memory: 1523kB
                                             Worker 1:  Sort Method: quicksort  Memory: 1515kB
                                             ->  Nested Loop  (cost=1.30..125355.39 rows=42 width=48) (actual time=218.623..15019.472 rows=11301 loops=3)
                                                   ->  Nested Loop  (cost=0.87..124393.44 rows=1717 width=18) (actual time=217.002..11172.285 rows=11843 loops=3)
                                                         ->  Nested Loop  (cost=0.43..123022.30 rows=2836 width=24) (actual time=215.598..5569.040 rows=16517 loops=3)
                                                               ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111330.07 rows=2836 width=14) (actual time=214.610..2149.961 rows=16517 loops=3)
                                                                     Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                     Rows Removed by Filter: 1984113
                                                               ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.12 rows=1 width=10) (actual time=0.206..0.206 rows=1 loops=49552)
                                                                     Index Cond: (id = (uh.title_id)::text)
                                                                     Heap Fetches: 0
                                                         ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.338..0.338 rows=1 loops=49552)
                                                               Index Cond: ((title_id)::text = (t2.id)::text)
                                                               Filter: (season_number IS NOT NULL)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.324..0.324 rows=1 loops=35530)
                                                         Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                         Filter: ((title_type)::text = 'tvSeries'::text)
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..959482.28 rows=3921060 width=42) (actual time=0.694..11879.782 rows=9377331 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834474.73 rows=15198860 width=17) (actual time=0.663..6389.204 rows=15197460 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462079.46 rows=15198860 width=14) (actual time=0.606..2253.836 rows=15197460 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45592381)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15198094  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15196504  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.003..0.003 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
                     ->  Memoize  (cost=0.30..1.62 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=32785)
                           Cache Key: uh.user_id
                           Cache Mode: logical
                           Hits: 4773  Misses: 28012  Evictions: 0  Overflows: 0  Memory Usage: 2837kB
                           ->  Index Scan using users_pkey on users u  (cost=0.29..1.61 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=28012)
                                 Index Cond: (id = uh.user_id)
                                 Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                 Rows Removed by Filter: 0
 Planning Time: 14.723 ms
 JIT:
   Functions: 129
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 7.075 ms, Inlining 252.696 ms, Optimization 500.416 ms, Emission 368.902 ms, Total 1129.088 ms
 Execution Time: 29149.561 ms
(67 rows)


explain analyze SELECT n.id,
    n.primary_name,
    date_part('year', NOW())::int - n.birth_year AS age,
    count(*) AS roles
FROM name n
JOIN titlePrincipals tp ON tp.name_id = n.id
JOIN titlePrincipalsCharacters tpc ON tpc.title_id = tp.title_id
    AND tpc.name_id = tp.name_id
JOIN category c ON c.id = tp.category_id
JOIN title t ON t.id = tp.title_id
WHERE t.start_year >= date_part('year', NOW())::int - 10
    AND c.name = 'actress'
    AND n.death_year IS NULL
    AND t.title_type IN (
        'movie', 'tvSeries', 'tvMiniSeries', 'tvMovie'
    )
GROUP BY n.id
ORDER BY roles DESC
LIMIT 100;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1280895.00..1280895.03 rows=11 width=36) (actual time=40451.327..40543.248 rows=100 loops=1)
   ->  Sort  (cost=1280895.00..1280895.03 rows=11 width=36) (actual time=39998.415..40090.328 rows=100 loops=1)
         Sort Key: (count(*)) DESC
         Sort Method: top-N heapsort  Memory: 38kB
         ->  GroupAggregate  (cost=1280894.51..1280894.81 rows=11 width=36) (actual time=39704.516..40052.374 rows=183837 loops=1)
               Group Key: n.id
               ->  Sort  (cost=1280894.51..1280894.54 rows=11 width=28) (actual time=39704.453..39934.461 rows=396348 loops=1)
                     Sort Key: n.id
                     Sort Method: external merge  Disk: 14312kB
                     ->  Gather  (cost=235375.13..1280894.32 rows=11 width=28) (actual time=12208.049..39301.863 rows=396348 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Nested Loop  (cost=234375.13..1279893.22 rows=5 width=28) (actual time=12182.135..39432.812 rows=132116 loops=3)
                                 ->  Nested Loop  (cost=234374.57..1279872.53 rows=5 width=20) (actual time=12180.412..25012.376 rows=132656 loops=3)
                                       ->  Parallel Hash Join  (cost=234374.01..1044896.43 rows=88216 width=30) (actual time=12178.412..12764.581 rows=149480 loops=3)
                                             Hash Cond: ((tp.title_id)::text = (t.id)::text)
                                             ->  Hash Join  (cost=1.16..781764.71 rows=1941667 width=20) (actual time=0.818..7962.430 rows=3185892 loops=3)
                                                   Hash Cond: (tp.category_id = c.id)
                                                   ->  Parallel Seq Scan on titleprincipals tp  (cost=0.00..699000.00 rows=23300000 width=24) (actual time=0.688..6043.371 rows=18639969 loops=3)
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.066..0.067 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on category c  (cost=0.00..1.15 rows=1 width=4) (actual time=0.054..0.055 rows=1 loops=3)
                                                               Filter: ((name)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                             ->  Parallel Hash  (cost=231140.54..231140.54 rows=185945 width=10) (actual time=3290.306..3290.307 rows=117416 loops=3)
                                                   Buckets: 131072  Batches: 8  Memory Usage: 3104kB
                                                   ->  Parallel Seq Scan on title t  (cost=0.00..231140.54 rows=185945 width=10) (actual time=251.782..3251.978 rows=117416 loops=3)
                                                         Filter: (((title_type)::text = ANY ('{movie,tvSeries,tvMiniSeries,tvMovie}'::text[])) AND (start_year >= ((date_part('year'::text, now()))::integer - 10)))
                                                         Rows Removed by Filter: 3156125
                                       ->  Index Only Scan using titleprincipalscharacters_pkey on titleprincipalscharacters tpc  (cost=0.56..2.65 rows=1 width=20) (actual time=0.081..0.081 rows=1 loops=448441)
                                             Index Cond: ((title_id = (tp.title_id)::text) AND (name_id = (tp.name_id)::text))
                                             Heap Fetches: 0
                                 ->  Index Scan using name_pkey on name n  (cost=0.56..4.14 rows=1 width=28) (actual time=0.108..0.108 rows=1 loops=397968)
                                       Index Cond: ((id)::text = (tp.name_id)::text)
                                       Filter: (death_year IS NULL)
                                       Rows Removed by Filter: 0
 Planning Time: 21.659 ms
 JIT:
   Functions: 104
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 6.463 ms, Inlining 263.995 ms, Optimization 456.446 ms, Emission 347.734 ms, Total 1074.637 ms
 Execution Time: 40949.805 ms
(42 rows)


explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=956008.43..956008.68 rows=100 width=74) (actual time=30052.190..30052.358 rows=100 loops=1)
   ->  Sort  (cost=956008.43..956042.29 rows=13542 width=74) (actual time=29494.386..29494.546 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 40kB
         ->  Finalize GroupAggregate  (cost=119075.77..955490.87 rows=13542 width=74) (actual time=15454.836..29488.516 rows=20602 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=119075.77..955242.61 rows=11284 width=74) (actual time=15454.815..29477.142 rows=24981 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=118075.75..952940.13 rows=5642 width=74) (actual time=15432.802..29049.736 rows=8327 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=118075.75..952827.29 rows=5642 width=66) (actual time=15432.765..29044.116 rows=10821 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 333  Sort Method: quicksort  Average Memory: 31kB  Peak Memory: 31kB
                                 Worker 0:  Full-sort Groups: 327  Sort Method: quicksort  Average Memory: 30kB  Peak Memory: 30kB
                                 Worker 1:  Full-sort Groups: 331  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=117927.80..952573.40 rows=5642 width=66) (actual time=15423.590..29033.908 rows=10821 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=117927.10..117927.21 rows=45 width=44) (actual time=15357.948..15363.056 rows=11188 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 1416kB
                                             Worker 0:  Sort Method: quicksort  Memory: 1399kB
                                             Worker 1:  Sort Method: quicksort  Memory: 1411kB
                                             ->  Nested Loop  (cost=1.59..117925.86 rows=45 width=44) (actual time=282.720..15340.689 rows=11188 loops=3)
                                                   ->  Nested Loop  (cost=1.30..117894.40 rows=45 width=48) (actual time=282.678..15294.007 rows=11281 loops=3)
                                                         ->  Nested Loop  (cost=0.87..117060.13 rows=1714 width=18) (actual time=280.933..11441.289 rows=11822 loops=3)
                                                               ->  Nested Loop  (cost=0.43..115750.85 rows=2846 width=24) (actual time=279.265..5727.673 rows=16488 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111330.36 rows=2846 width=14) (actual time=278.259..2265.188 rows=16488 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1984142
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..1.55 rows=1 width=10) (actual time=0.209..0.209 rows=1 loops=49465)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.46 rows=1 width=24) (actual time=0.346..0.346 rows=1 loops=49465)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=30) (actual time=0.325..0.325 rows=1 loops=35465)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..0.70 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=33842)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..790586.22 rows=3520233 width=42) (actual time=1.153..12769.112 rows=9377679 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..670591.08 rows=15198444 width=17) (actual time=1.120..6868.190 rows=15197988 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..298206.02 rows=15198444 width=14) (actual time=1.028..2348.333 rows=15197988 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45593965)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15198094  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15198088  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 15.311 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.464 ms, Inlining 273.993 ms, Optimization 635.428 ms, Emission 481.984 ms, Total 1399.869 ms
 Execution Time: 30468.427 ms
(65 rows)


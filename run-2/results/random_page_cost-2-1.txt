explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=968902.75..968903.00 rows=100 width=74) (actual time=31766.963..31767.134 rows=100 loops=1)
   ->  Sort  (cost=968902.75..968939.12 rows=14550 width=74) (actual time=31213.529..31213.693 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 40kB
         ->  Finalize GroupAggregate  (cost=119094.40..968346.66 rows=14550 width=74) (actual time=16469.596..31207.634 rows=20602 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=119094.40..968079.92 rows=12124 width=74) (actual time=16469.575..31196.068 rows=24986 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=118094.38..965680.48 rows=6062 width=74) (actual time=16447.132..30777.268 rows=8329 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=118094.38..965559.24 rows=6062 width=66) (actual time=16447.101..30771.459 rows=10821 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 332  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 324  Sort Method: quicksort  Average Memory: 30kB  Peak Memory: 30kB
                                 Worker 1:  Full-sort Groups: 332  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=117954.59..965286.45 rows=6062 width=66) (actual time=16437.878..30760.670 rows=10821 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=117953.88..117953.99 rows=42 width=44) (actual time=16374.410..16379.629 rows=11188 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 1422kB
                                             Worker 0:  Sort Method: quicksort  Memory: 1386kB
                                             Worker 1:  Sort Method: quicksort  Memory: 1417kB
                                             ->  Nested Loop  (cost=1.59..117952.75 rows=42 width=44) (actual time=287.134..16356.118 rows=11188 loops=3)
                                                   ->  Nested Loop  (cost=1.30..117923.46 rows=42 width=48) (actual time=287.088..16303.289 rows=11281 loops=3)
                                                         ->  Nested Loop  (cost=0.87..117082.17 rows=1729 width=18) (actual time=285.461..12190.464 rows=11822 loops=3)
                                                               ->  Nested Loop  (cost=0.43..115767.39 rows=2858 width=24) (actual time=283.446..6097.323 rows=16489 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111329.60 rows=2858 width=14) (actual time=282.405..2383.729 rows=16489 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1984142
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..1.55 rows=1 width=10) (actual time=0.224..0.224 rows=1 loops=49467)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.46 rows=1 width=24) (actual time=0.369..0.369 rows=1 loops=49467)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=30) (actual time=0.347..0.347 rows=1 loops=35465)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..0.70 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=33842)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..796936.76 rows=4026807 width=42) (actual time=1.211..13307.983 rows=9377752 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..670607.37 rows=15198860 width=17) (actual time=1.181..7077.799 rows=15198118 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..298212.26 rows=15198860 width=14) (actual time=1.090..2531.169 rows=15198118 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45594354)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15198094  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15198088  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15198088  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 15.121 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.545 ms, Inlining 278.443 ms, Optimization 638.120 ms, Emission 482.883 ms, Total 1407.991 ms
 Execution Time: 32165.213 ms
(65 rows)


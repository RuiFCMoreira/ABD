explain analyze SELECT *
FROM (
    SELECT t.id,
        left(t.primary_title, 30),
        ((start_year / 10) * 10)::int AS decade,
        avg(uh.rating) AS rating,
        rank() over (
            PARTITION by ((start_year / 10) * 10) :: int
            ORDER BY avg(uh.rating) DESC, t.id
        ) AS rank
    FROM title t
    JOIN userHistory uh ON uh.title_id = t.id
    WHERE t.title_type = 'movie'
        AND ((start_year / 10) * 10)::int >= 1980
        AND t.id IN (
            SELECT title_id
            FROM titleGenre tg
            JOIN genre g ON g.id = tg.genre_id
            WHERE g.name IN (
                'Drama'
            )
        )
        AND t.id IN (
            SELECT title_id
            FROM titleAkas
            WHERE region IN (
                'US', 'GB', 'ES', 'DE', 'FR', 'PT'
            )
        )
    GROUP BY t.id
    HAVING count(uh.rating) >= 3
    ORDER BY decade, rating DESC
) t_
WHERE rank <= 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on t_  (cost=212685.89..212702.89 rows=133 width=86) (actual time=6450.482..6514.957 rows=50 loops=1)
   Filter: (t_.rank <= 10)
   Rows Removed by Filter: 1953
   ->  WindowAgg  (cost=212685.89..212697.89 rows=400 width=86) (actual time=6450.477..6514.834 rows=2003 loops=1)
         ->  Sort  (cost=212685.89..212686.89 rows=400 width=66) (actual time=6450.417..6513.230 rows=2003 loops=1)
               Sort Key: (((t.start_year / 10) * 10)), (avg(uh.rating)) DESC, t.id
               Sort Method: quicksort  Memory: 228kB
               ->  GroupAggregate  (cost=212495.92..212668.60 rows=400 width=66) (actual time=6400.887..6509.042 rows=2003 loops=1)
                     Group Key: t.id
                     Filter: (count(uh.rating) >= 3)
                     Rows Removed by Filter: 40986
                     ->  Gather Merge  (cost=212495.92..212639.60 rows=1200 width=38) (actual time=6400.808..6480.434 rows=60678 loops=1)
                           Workers Planned: 4
                           Workers Launched: 4
                           ->  Sort  (cost=211495.86..211496.61 rows=300 width=38) (actual time=6374.963..6375.670 rows=12136 loops=5)
                                 Sort Key: t.id
                                 Sort Method: quicksort  Memory: 1362kB
                                 Worker 0:  Sort Method: quicksort  Memory: 1394kB
                                 Worker 1:  Sort Method: quicksort  Memory: 1353kB
                                 Worker 2:  Sort Method: quicksort  Memory: 1367kB
                                 Worker 3:  Sort Method: quicksort  Memory: 1371kB
                                 ->  Nested Loop  (cost=1.69..211483.52 rows=300 width=38) (actual time=59.857..6356.928 rows=12136 loops=5)
                                       Join Filter: ((t.id)::text = (uh.title_id)::text)
                                       ->  Nested Loop Semi Join  (cost=1.26..211135.58 rows=166 width=54) (actual time=56.312..4562.724 rows=16513 loops=5)
                                             Join Filter: ((t.id)::text = (tg.title_id)::text)
                                             ->  Nested Loop Semi Join  (cost=0.56..204359.14 rows=2996 width=44) (actual time=48.028..3407.902 rows=47273 loops=5)
                                                   ->  Parallel Seq Scan on title t  (cost=0.00..167730.86 rows=53590 width=34) (actual time=46.205..1258.341 rows=77836 loops=5)
                                                         Filter: (((title_type)::text = 'movie'::text) AND (((start_year / 10) * 10) >= 1980))
                                                         Rows Removed by Filter: 1886289
                                                   ->  Index Only Scan using akas_id_region_idx on titleakas  (cost=0.56..4.36 rows=34 width=10) (actual time=0.027..0.027 rows=1 loops=389178)
                                                         Index Cond: (title_id = (t.id)::text)
                                                         Filter: ((region)::text = ANY ('{US,GB,ES,DE,FR,PT}'::text[]))
                                                         Rows Removed by Filter: 1
                                                         Heap Fetches: 0
                                             ->  Nested Loop  (cost=0.70..2.25 rows=1 width=10) (actual time=0.024..0.024 rows=0 loops=236365)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..1.60 rows=4 width=14) (actual time=0.021..0.021 rows=1 loops=236365)
                                                         Index Cond: (title_id = (titleakas.title_id)::text)
                                                         Heap Fetches: 0
                                                   ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=327381)
                                                         Index Cond: (id = tg.genre_id)
                                                         Filter: ((name)::text = 'Drama'::text)
                                                         Rows Removed by Filter: 1
                                       ->  Index Scan using userhistory_title_id on userhistory uh  (cost=0.43..2.07 rows=2 width=14) (actual time=0.084..0.108 rows=1 loops=82566)
                                             Index Cond: ((title_id)::text = (tg.title_id)::text)
 Planning Time: 15.619 ms
 JIT:
   Functions: 129
   Options: Inlining false, Optimization false, Expressions true, Deforming true
   Timing: Generation 8.819 ms, Inlining 0.000 ms, Optimization 7.550 ms, Emission 204.785 ms, Total 221.154 ms
 Execution Time: 6868.925 ms
(50 rows)


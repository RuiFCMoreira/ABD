explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN userHistory uh ON uh.title_id = te.title_id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1119819.66..1119819.91 rows=100 width=74) (actual time=23586.609..23586.774 rows=100 loops=1)
   ->  Sort  (cost=1119819.66..1119840.52 rows=8345 width=74) (actual time=23066.669..23066.826 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  GroupAggregate  (cost=96212.00..1119500.72 rows=8345 width=74) (actual time=3539.564..23063.849 rows=5713 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Nested Loop  (cost=96212.00..1119333.82 rows=8345 width=66) (actual time=3539.082..23057.939 rows=6998 loops=1)
                     ->  Gather Merge  (cost=96211.70..1110759.03 rows=8345 width=70) (actual time=3538.446..22916.450 rows=7063 loops=1)
                           Workers Planned: 4
                           Workers Launched: 4
                           ->  Incremental Sort  (cost=95211.64..1108765.01 rows=2086 width=70) (actual time=3477.927..19904.264 rows=1413 loops=5)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 48  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 43  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 43  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 2:  Full-sort Groups: 45  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 3:  Full-sort Groups: 43  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=94725.56..1108671.14 rows=2086 width=70) (actual time=3441.773..19901.510 rows=1413 loops=5)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=94724.85..94724.89 rows=14 width=48) (actual time=3352.987..3354.160 rows=1463 loops=5)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 210kB
                                             Worker 0:  Sort Method: quicksort  Memory: 189kB
                                             Worker 1:  Sort Method: quicksort  Memory: 192kB
                                             Worker 2:  Sort Method: quicksort  Memory: 199kB
                                             Worker 3:  Sort Method: quicksort  Memory: 191kB
                                             ->  Nested Loop  (cost=0.43..94724.59 rows=14 width=48) (actual time=292.457..3349.608 rows=1463 loops=5)
                                                   ->  Nested Loop  (cost=0.43..94655.30 rows=564 width=18) (actual time=291.283..2484.214 rows=1527 loops=5)
                                                         ->  Parallel Seq Scan on userhistory uh  (cost=0.00..88822.55 rows=715 width=14) (actual time=290.070..1395.646 rows=2128 loops=5)
                                                               Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                               Rows Removed by Filter: 1198251
                                                         ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..8.16 rows=1 width=24) (actual time=0.509..0.509 rows=1 loops=10638)
                                                               Index Cond: ((title_id)::text = (uh.title_id)::text)
                                                               Filter: (season_number IS NOT NULL)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using title_hash on title t  (cost=0.00..0.12 rows=1 width=30) (actual time=0.564..0.564 rows=1 loops=7635)
                                                         Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                         Rows Removed by Index Recheck: 0
                                                         Filter: ((title_type)::text = 'tvSeries'::text)
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..962197.19 rows=4138253 width=42) (actual time=1.162..15397.667 rows=9373117 loops=5)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834474.73 rows=15198860 width=17) (actual time=1.124..7918.479 rows=15190705 loops=5)
                                                   ->  Index Only Scan using idx_titlegenre_title_id_genre_id on titlegenre tg  (cost=0.56..462079.46 rows=15198860 width=14) (actual time=1.057..2397.431 rows=15190705 loops=5)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=75953526)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197335  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15186028  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 2:  Hits: 15174547  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 3:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=140)
                                                               Index Cond: (id = tg.genre_id)
                     ->  Memoize  (cost=0.30..3.00 rows=1 width=4) (actual time=0.020..0.020 rows=1 loops=7063)
                           Cache Key: uh.user_id
                           Cache Mode: logical
                           Hits: 235  Misses: 6828  Evictions: 0  Overflows: 0  Memory Usage: 692kB
                           ->  Index Scan using users_pkey on users u  (cost=0.29..2.99 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=6828)
                                 Index Cond: (id = uh.user_id)
                                 Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                 Rows Removed by Filter: 0
 Planning Time: 14.439 ms
 JIT:
   Functions: 190
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 11.340 ms, Inlining 459.209 ms, Optimization 884.035 ms, Emission 624.984 ms, Total 1979.567 ms
 Execution Time: 23953.023 ms
(70 rows)


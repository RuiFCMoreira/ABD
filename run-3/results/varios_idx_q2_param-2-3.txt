explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=977023.98..977024.23 rows=100 width=74) (actual time=22656.382..22656.551 rows=100 loops=1)
   ->  Sort  (cost=977023.98..977040.53 rows=6623 width=74) (actual time=22132.944..22133.106 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  GroupAggregate  (cost=115153.30..976770.85 rows=6623 width=74) (actual time=7072.949..22130.428 rows=6076 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Nested Loop  (cost=115153.30..976638.39 rows=6623 width=66) (actual time=7072.472..22125.690 rows=7527 loops=1)
                     ->  Gather Merge  (cost=115153.01..969255.56 rows=6623 width=70) (actual time=7071.651..21993.949 rows=7596 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Incremental Sort  (cost=114152.98..967491.08 rows=2760 width=70) (actual time=7047.122..21491.155 rows=2532 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 82  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 77  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 79  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=113843.73..967366.88 rows=2760 width=70) (actual time=7023.776..21486.780 rows=2532 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=113843.02..113843.06 rows=18 width=48) (actual time=6953.829..6956.040 rows=2622 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 375kB
                                             Worker 0:  Sort Method: quicksort  Memory: 351kB
                                             Worker 1:  Sort Method: quicksort  Memory: 357kB
                                             ->  Nested Loop  (cost=0.87..113842.64 rows=18 width=48) (actual time=256.060..6946.571 rows=2622 loops=3)
                                                   ->  Nested Loop  (cost=0.87..113806.07 rows=722 width=18) (actual time=254.980..5390.551 rows=2736 loops=3)
                                                         ->  Nested Loop  (cost=0.43..113254.95 rows=1198 width=24) (actual time=253.716..3501.296 rows=3814 loops=3)
                                                               ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111327.76 rows=1198 width=14) (actual time=252.335..2059.081 rows=3814 loops=3)
                                                                     Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                     Rows Removed by Filter: 1996816
                                                               ->  Index Only Scan using title_pkey on title t2  (cost=0.43..1.61 rows=1 width=10) (actual time=0.375..0.375 rows=1 loops=11443)
                                                                     Index Cond: (id = (uh.title_id)::text)
                                                                     Heap Fetches: 0
                                                         ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.46 rows=1 width=24) (actual time=0.492..0.492 rows=1 loops=11443)
                                                               Index Cond: ((title_id)::text = (t2.id)::text)
                                                               Filter: (season_number IS NOT NULL)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using title_hash on title t  (cost=0.00..0.05 rows=1 width=30) (actual time=0.565..0.565 rows=1 loops=8209)
                                                         Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                         Rows Removed by Index Recheck: 0
                                                         Filter: ((title_type)::text = 'tvSeries'::text)
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..800039.60 rows=4276516 width=42) (actual time=1.354..13582.600 rows=9377274 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..670590.93 rows=15198444 width=17) (actual time=1.321..7375.957 rows=15197355 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..298206.02 rows=15198444 width=14) (actual time=1.227..2714.700 rows=15197355 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45592064)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15196504  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
                     ->  Index Scan using users_pkey on users u  (cost=0.29..1.11 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=7596)
                           Index Cond: (id = uh.user_id)
                           Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                           Rows Removed by Filter: 0
 Planning Time: 18.842 ms
 JIT:
   Functions: 124
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 7.314 ms, Inlining 283.289 ms, Optimization 568.930 ms, Emission 426.979 ms, Total 1286.512 ms
 Execution Time: 23013.400 ms
(64 rows)


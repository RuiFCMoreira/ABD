explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1138145.67..1138145.92 rows=100 width=74) (actual time=21394.321..21394.477 rows=100 loops=1)
   ->  Sort  (cost=1138145.67..1138156.28 rows=4243 width=74) (actual time=20831.214..20831.363 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  Finalize GroupAggregate  (cost=116865.37..1137983.51 rows=4243 width=74) (actual time=6316.714..20829.274 rows=6108 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=116865.37..1137905.72 rows=3536 width=74) (actual time=6316.699..20825.988 rows=6811 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=115865.34..1136497.55 rows=1768 width=74) (actual time=6290.576..20363.902 rows=2270 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=115865.34..1136462.19 rows=1768 width=66) (actual time=6290.541..20362.312 rows=2525 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 81  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 79  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 77  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=115287.79..1136382.63 rows=1768 width=66) (actual time=6270.969..20358.545 rows=2525 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=115287.08..115287.11 rows=11 width=44) (actual time=6199.749..6201.599 rows=2614 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 341kB
                                             Worker 0:  Sort Method: quicksort  Memory: 333kB
                                             Worker 1:  Sort Method: quicksort  Memory: 327kB
                                             ->  Nested Loop  (cost=1.59..115286.89 rows=11 width=44) (actual time=289.993..6193.261 rows=2614 loops=3)
                                                   ->  Nested Loop  (cost=1.30..115246.85 rows=11 width=48) (actual time=289.951..6162.912 rows=2639 loops=3)
                                                         ->  Nested Loop  (cost=0.87..114992.58 rows=453 width=18) (actual time=289.154..4958.733 rows=2754 loops=3)
                                                               ->  Nested Loop  (cost=0.43..114627.09 rows=756 width=24) (actual time=287.698..3176.282 rows=3838 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111330.98 rows=756 width=14) (actual time=286.799..1958.878 rows=3838 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1996792
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.36 rows=1 width=10) (actual time=0.315..0.315 rows=1 loops=11515)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.462..0.462 rows=1 loops=11515)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.435..0.435 rows=1 loops=8263)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..3.64 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=7918)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..965773.62 rows=4424367 width=42) (actual time=1.153..13218.738 rows=9377274 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834474.73 rows=15198860 width=17) (actual time=1.117..7040.952 rows=15197355 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462079.46 rows=15198860 width=14) (actual time=1.012..2341.237 rows=15197355 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45592064)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15196504  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.005..0.005 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 15.565 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.362 ms, Inlining 274.043 ms, Optimization 653.863 ms, Emission 495.174 ms, Total 1431.442 ms
 Execution Time: 21743.406 ms
(65 rows)


explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1141631.12..1141631.37 rows=100 width=74) (actual time=21593.312..21593.492 rows=100 loops=1)
   ->  Sort  (cost=1141631.12..1141643.39 rows=4907 width=74) (actual time=21030.684..21030.857 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  Finalize GroupAggregate  (cost=116797.43..1141443.58 rows=4907 width=74) (actual time=6005.466..21028.686 rows=6172 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=116797.43..1141353.61 rows=4090 width=74) (actual time=6005.439..21025.220 rows=6887 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=115797.40..1139881.50 rows=2045 width=74) (actual time=5981.002..20459.420 rows=2296 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=115797.40..1139840.60 rows=2045 width=66) (actual time=5980.967..20457.780 rows=2558 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 83  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 78  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 79  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=115296.44..1139748.57 rows=2045 width=66) (actual time=5958.024..20454.058 rows=2558 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=115295.73..115295.76 rows=12 width=44) (actual time=5891.464..5893.312 rows=2648 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 348kB
                                             Worker 0:  Sort Method: quicksort  Memory: 329kB
                                             Worker 1:  Sort Method: quicksort  Memory: 334kB
                                             ->  Nested Loop  (cost=1.59..115295.52 rows=12 width=44) (actual time=303.514..5886.305 rows=2648 loops=3)
                                                   ->  Nested Loop  (cost=1.30..115251.85 rows=12 width=48) (actual time=303.475..5860.786 rows=2673 loops=3)
                                                         ->  Nested Loop  (cost=0.87..114995.71 rows=457 width=18) (actual time=302.760..4707.449 rows=2789 loops=3)
                                                               ->  Nested Loop  (cost=0.43..114629.73 rows=757 width=24) (actual time=301.600..3002.500 rows=3886 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111329.18 rows=757 width=14) (actual time=300.640..1835.334 rows=3886 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1996745
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.36 rows=1 width=10) (actual time=0.299..0.299 rows=1 loops=11657)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.437..0.437 rows=1 loops=11657)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.411..0.411 rows=1 loops=8368)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..3.64 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=8018)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..967441.75 rows=4559312 width=42) (actual time=1.029..13470.791 rows=9375014 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834458.13 rows=15198444 width=17) (actual time=0.991..7155.626 rows=15193741 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462073.22 rows=15198444 width=14) (actual time=0.923..2413.480 rows=15193741 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45581224)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15186028  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15197335  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 14.869 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.200 ms, Inlining 283.913 ms, Optimization 673.241 ms, Emission 506.139 ms, Total 1471.493 ms
 Execution Time: 21947.943 ms
(65 rows)


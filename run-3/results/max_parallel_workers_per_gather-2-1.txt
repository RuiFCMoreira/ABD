explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1126475.54..1126475.79 rows=100 width=74) (actual time=25065.174..25065.357 rows=100 loops=1)
   ->  Sort  (cost=1126475.54..1126511.31 rows=14308 width=74) (actual time=24541.530..24541.706 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  GroupAggregate  (cost=98440.68..1125928.69 rows=14308 width=74) (actual time=4444.713..24538.366 rows=6321 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Nested Loop  (cost=98440.68..1125642.53 rows=14308 width=66) (actual time=4444.249..24532.052 rows=7874 loops=1)
                     ->  Gather Merge  (cost=98440.38..1114953.25 rows=14457 width=70) (actual time=4443.568..24390.470 rows=7946 loops=1)
                           Workers Planned: 4
                           Workers Launched: 4
                           ->  Incremental Sort  (cost=97440.32..1112231.23 rows=3614 width=70) (actual time=4384.944..21572.528 rows=1589 loops=5)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 52  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 49  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 50  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 2:  Full-sort Groups: 49  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 3:  Full-sort Groups: 49  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=97159.49..1112068.60 rows=3614 width=70) (actual time=4348.803..21569.525 rows=1589 loops=5)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=97158.78..97158.84 rows=24 width=48) (actual time=4259.130..4260.474 rows=1646 loops=5)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 221kB
                                             Worker 0:  Sort Method: quicksort  Memory: 210kB
                                             Worker 1:  Sort Method: quicksort  Memory: 216kB
                                             Worker 2:  Sort Method: quicksort  Memory: 211kB
                                             Worker 3:  Sort Method: quicksort  Memory: 215kB
                                             ->  Nested Loop  (cost=1.30..97158.23 rows=24 width=48) (actual time=306.807..4254.782 rows=1646 loops=5)
                                                   ->  Nested Loop  (cost=0.87..96588.56 rows=1016 width=18) (actual time=305.879..3468.481 rows=1719 loops=5)
                                                         ->  Nested Loop  (cost=0.43..95773.93 rows=1685 width=24) (actual time=304.470..2285.088 rows=2392 loops=5)
                                                               ->  Parallel Seq Scan on userhistory uh  (cost=0.00..88822.47 rows=1685 width=14) (actual time=303.661..1491.447 rows=2392 loops=5)
                                                                     Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                     Rows Removed by Filter: 1197987
                                                               ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.13 rows=1 width=10) (actual time=0.329..0.329 rows=1 loops=11958)
                                                                     Index Cond: (id = (uh.title_id)::text)
                                                                     Heap Fetches: 0
                                                         ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.492..0.492 rows=1 loops=11958)
                                                               Index Cond: ((title_id)::text = (t2.id)::text)
                                                               Filter: (season_number IS NOT NULL)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.454..0.454 rows=1 loops=8593)
                                                         Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                         Filter: ((title_type)::text = 'tvSeries'::text)
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..962662.22 rows=4176937 width=42) (actual time=1.190..16022.563 rows=9374074 loops=5)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834458.28 rows=15198444 width=17) (actual time=1.156..8394.885 rows=15192248 loops=5)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462073.22 rows=15198444 width=14) (actual time=1.081..2701.914 rows=15192248 loops=5)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=75961240)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197335  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15186028  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15182261  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 2:  Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 3:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=140)
                                                               Index Cond: (id = tg.genre_id)
                     ->  Memoize  (cost=0.30..1.63 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=7946)
                           Cache Key: uh.user_id
                           Cache Mode: logical
                           Hits: 288  Misses: 7658  Evictions: 0  Overflows: 0  Memory Usage: 776kB
                           ->  Index Scan using users_pkey on users u  (cost=0.29..1.62 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=7658)
                                 Index Cond: (id = uh.user_id)
                                 Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                 Rows Removed by Filter: 0
 Planning Time: 14.369 ms
 JIT:
   Functions: 205
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 11.289 ms, Inlining 454.179 ms, Optimization 921.517 ms, Emission 665.951 ms, Total 2052.935 ms
 Execution Time: 25414.119 ms
(73 rows)


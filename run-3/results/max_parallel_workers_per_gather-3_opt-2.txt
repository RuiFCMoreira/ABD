explain analyze SELECT n.id,
    n.primary_name,
    date_part('year', NOW())::int - n.birth_year AS age,
    count(*) AS roles
FROM name n
JOIN titlePrincipals tp ON tp.name_id = n.id
JOIN titlePrincipalsCharacters tpc ON tpc.title_id = tp.title_id
    AND tpc.name_id = tp.name_id
JOIN category c ON c.id = tp.category_id
JOIN title t ON t.id = tp.title_id
WHERE t.start_year >= date_part('year', NOW())::int - 10
    AND c.name = 'actress'
    AND n.death_year IS NULL
    AND t.title_type IN (
        'movie', 'tvSeries', 'tvMiniSeries', 'tvMovie'
    )
GROUP BY n.id
ORDER BY roles DESC
LIMIT 100;
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1003619.54..1003619.57 rows=13 width=36) (actual time=24484.007..24672.890 rows=100 loops=1)
   ->  Sort  (cost=1003619.54..1003619.57 rows=13 width=36) (actual time=23978.340..24167.215 rows=100 loops=1)
         Sort Key: (count(*)) DESC
         Sort Method: top-N heapsort  Memory: 38kB
         ->  Finalize GroupAggregate  (cost=1003617.50..1003619.30 rows=13 width=36) (actual time=23699.252..24127.491 rows=183837 loops=1)
               Group Key: n.id
               ->  Gather Merge  (cost=1003617.50..1003618.98 rows=12 width=36) (actual time=23699.193..24028.611 rows=279300 loops=1)
                     Workers Planned: 4
                     Workers Launched: 4
                     ->  Partial GroupAggregate  (cost=1002617.44..1002617.49 rows=3 width=36) (actual time=23647.625..23694.821 rows=55860 loops=5)
                           Group Key: n.id
                           ->  Sort  (cost=1002617.44..1002617.45 rows=3 width=28) (actual time=23647.575..23667.216 rows=79270 loops=5)
                                 Sort Key: n.id
                                 Sort Method: external merge  Disk: 2856kB
                                 Worker 0:  Sort Method: external merge  Disk: 2864kB
                                 Worker 1:  Sort Method: external merge  Disk: 2864kB
                                 Worker 2:  Sort Method: external merge  Disk: 2808kB
                                 Worker 3:  Sort Method: external merge  Disk: 2928kB
                                 ->  Nested Loop  (cost=188030.14..1002617.41 rows=3 width=28) (actual time=8956.157..23505.272 rows=79270 loops=5)
                                       ->  Nested Loop  (cost=188029.58..1002605.00 rows=3 width=20) (actual time=8954.969..16424.562 rows=79594 loops=5)
                                             ->  Parallel Hash Join  (cost=188029.02..860747.27 rows=53257 width=30) (actual time=8953.920..9369.784 rows=89688 loops=5)
                                                   Hash Cond: ((tp.title_id)::text = (t.id)::text)
                                                   ->  Hash Join  (cost=1.16..655459.29 rows=1165000 width=20) (actual time=0.623..6496.194 rows=1911535 loops=5)
                                                         Hash Cond: (tp.category_id = c.id)
                                                         ->  Parallel Seq Scan on titleprincipals tp  (cost=0.00..605800.00 rows=13980000 width=24) (actual time=0.485..5119.675 rows=11183981 loops=5)
                                                         ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.063..0.065 rows=1 loops=5)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on category c  (cost=0.00..1.15 rows=1 width=4) (actual time=0.056..0.057 rows=1 loops=5)
                                                                     Filter: ((name)::text = 'actress'::text)
                                                                     Rows Removed by Filter: 11
                                                   ->  Parallel Hash  (cost=186077.54..186077.54 rows=112185 width=10) (actual time=1855.043..1855.044 rows=70450 loops=5)
                                                         Buckets: 131072  Batches: 8  Memory Usage: 3168kB
                                                         ->  Parallel Seq Scan on title t  (cost=0.00..186077.54 rows=112185 width=10) (actual time=335.445..1826.418 rows=70450 loops=5)
                                                               Filter: (((title_type)::text = ANY ('{movie,tvSeries,tvMiniSeries,tvMovie}'::text[])) AND (start_year >= ((date_part('year'::text, now()))::integer - 10)))
                                                               Rows Removed by Filter: 1893675
                                             ->  Index Only Scan using titleprincipalscharacters_pkey on titleprincipalscharacters tpc  (cost=0.56..2.65 rows=1 width=20) (actual time=0.078..0.078 rows=1 loops=448441)
                                                   Index Cond: ((title_id = (tp.title_id)::text) AND (name_id = (tp.name_id)::text))
                                                   Heap Fetches: 0
                                       ->  Index Scan using name_pkey on name n  (cost=0.56..4.14 rows=1 width=28) (actual time=0.088..0.088 rows=1 loops=397968)
                                             Index Cond: ((id)::text = (tp.name_id)::text)
                                             Filter: (death_year IS NULL)
                                             Rows Removed by Filter: 0
 Planning Time: 22.368 ms
 JIT:
   Functions: 189
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 11.637 ms, Inlining 476.922 ms, Optimization 941.841 ms, Emission 667.404 ms, Total 2097.805 ms
 Execution Time: 25053.567 ms
(48 rows)


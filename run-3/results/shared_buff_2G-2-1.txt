explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1132636.22..1132636.47 rows=100 width=74) (actual time=23438.671..23438.812 rows=100 loops=1)
   ->  Sort  (cost=1132636.22..1132651.96 rows=6297 width=74) (actual time=22877.884..22878.019 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  Finalize GroupAggregate  (cost=118882.14..1132395.55 rows=6297 width=74) (actual time=6651.343..22875.755 rows=6280 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=118882.14..1132280.10 rows=5248 width=74) (actual time=6651.324..22872.104 rows=7011 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=117882.11..1130674.33 rows=2624 width=74) (actual time=6627.986..21798.146 rows=2337 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=117882.11..1130621.85 rows=2624 width=66) (actual time=6627.949..21796.429 rows=2604 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 85  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 80  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 79  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=117496.05..1130503.77 rows=2624 width=66) (actual time=6604.402..21792.476 rows=2604 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=117495.34..117495.39 rows=18 width=44) (actual time=6535.498..6537.308 rows=2696 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 353kB
                                             Worker 0:  Sort Method: quicksort  Memory: 337kB
                                             Worker 1:  Sort Method: quicksort  Memory: 334kB
                                             ->  Nested Loop  (cost=1.59..117494.97 rows=18 width=44) (actual time=289.489..6529.321 rows=2696 loops=3)
                                                   ->  Nested Loop  (cost=1.30..117441.08 rows=18 width=48) (actual time=289.440..6493.950 rows=2722 loops=3)
                                                         ->  Nested Loop  (cost=0.87..117038.51 rows=718 width=18) (actual time=288.396..5237.888 rows=2840 loops=3)
                                                               ->  Nested Loop  (cost=0.43..116462.24 rows=1192 width=24) (actual time=287.137..3380.119 rows=3954 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111328.24 rows=1192 width=14) (actual time=286.174..2110.193 rows=3954 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1996677
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.31 rows=1 width=10) (actual time=0.319..0.319 rows=1 loops=11862)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.467..0.467 rows=1 loops=11862)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.439..0.439 rows=1 loops=8521)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..2.99 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=8165)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..961725.50 rows=4100518 width=42) (actual time=1.331..14075.981 rows=9377274 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834474.73 rows=15198860 width=17) (actual time=1.294..7567.129 rows=15197355 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462079.46 rows=15198860 width=14) (actual time=1.225..2720.552 rows=15197355 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45592064)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15196504  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.003..0.003 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 15.842 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.377 ms, Inlining 276.471 ms, Optimization 652.787 ms, Emission 489.938 ms, Total 1427.573 ms
 Execution Time: 23790.421 ms
(65 rows)


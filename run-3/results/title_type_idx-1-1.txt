explain analyze SELECT *
FROM (
    SELECT t.id,
        left(t.primary_title, 30),
        ((start_year / 10) * 10)::int AS decade,
        avg(uh.rating) AS rating,
        rank() over (
            PARTITION by ((start_year / 10) * 10) :: int
            ORDER BY avg(uh.rating) DESC, t.id
        ) AS rank
    FROM title t
    JOIN userHistory uh ON uh.title_id = t.id
    WHERE t.title_type = 'movie'
        AND ((start_year / 10) * 10)::int >= 1980
        AND t.id IN (
            SELECT title_id
            FROM titleGenre tg
            JOIN genre g ON g.id = tg.genre_id
            WHERE g.name IN (
                'Drama'
            )
        )
        AND t.id IN (
            SELECT title_id
            FROM titleAkas
            WHERE region IN (
                'US', 'GB', 'ES', 'DE', 'FR', 'PT'
            )
        )
    GROUP BY t.id
    HAVING count(uh.rating) >= 3
    ORDER BY decade, rating DESC
) t_
WHERE rank <= 10;
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on t_  (cost=411298.12..411312.95 rows=116 width=86) (actual time=40180.430..40231.717 rows=50 loops=1)
   Filter: (t_.rank <= 10)
   Rows Removed by Filter: 1953
   ->  WindowAgg  (cost=411298.12..411308.59 rows=349 width=86) (actual time=40180.426..40231.610 rows=2003 loops=1)
         ->  Sort  (cost=411298.12..411298.99 rows=349 width=66) (actual time=40180.381..40230.033 rows=2003 loops=1)
               Sort Key: (((t.start_year / 10) * 10)), (avg(uh.rating)) DESC, t.id
               Sort Method: quicksort  Memory: 228kB
               ->  Finalize GroupAggregate  (cost=411149.74..411283.38 rows=349 width=66) (actual time=40120.092..40226.189 rows=2003 loops=1)
                     Group Key: t.id
                     Filter: (count(uh.rating) >= 3)
                     Rows Removed by Filter: 40986
                     ->  Gather Merge  (cost=411149.74..411259.36 rows=874 width=74) (actual time=40120.041..40195.302 rows=45053 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Partial GroupAggregate  (cost=410149.71..410158.45 rows=437 width=74) (actual time=40098.651..40112.405 rows=15018 loops=3)
                                 Group Key: t.id
                                 ->  Sort  (cost=410149.71..410150.81 rows=437 width=38) (actual time=40098.601..40102.214 rows=20226 loops=3)
                                       Sort Key: t.id
                                       Sort Method: quicksort  Memory: 2398kB
                                       Worker 0:  Sort Method: quicksort  Memory: 2449kB
                                       Worker 1:  Sort Method: quicksort  Memory: 2383kB
                                       ->  Nested Loop Semi Join  (cost=188212.88..410130.55 rows=437 width=38) (actual time=11757.027..40057.053 rows=20226 loops=3)
                                             ->  Nested Loop Semi Join  (cost=188212.19..394013.02 rows=7900 width=58) (actual time=11756.014..34688.231 rows=58327 loops=3)
                                                   ->  Parallel Hash Join  (cost=188211.62..299971.41 rows=54823 width=48) (actual time=11753.157..12517.539 rows=96250 loops=3)
                                                         Hash Cond: ((uh.title_id)::text = (t.id)::text)
                                                         ->  Parallel Seq Scan on userhistory uh  (cost=0.00..80070.15 rows=2500815 width=14) (actual time=0.479..1475.322 rows=2000631 loops=3)
                                                         ->  Parallel Hash  (cost=186389.81..186389.81 rows=89665 width=34) (actual time=9818.868..9818.870 rows=129726 loops=3)
                                                               Buckets: 65536  Batches: 8  Memory Usage: 3840kB
                                                               ->  Parallel Bitmap Heap Scan on title t  (cost=7112.17..186389.81 rows=89665 width=34) (actual time=122.052..9736.050 rows=129726 loops=3)
                                                                     Recheck Cond: ((title_type)::text = 'movie'::text)
                                                                     Rows Removed by Index Recheck: 830781
                                                                     Filter: (((start_year / 10) * 10) >= 1980)
                                                                     Rows Removed by Filter: 84905
                                                                     Heap Blocks: exact=21623 lossy=11147
                                                                     ->  Bitmap Index Scan on title_type_idx  (cost=0.00..7058.37 rows=645591 width=0) (actual time=54.428..54.428 rows=643892 loops=1)
                                                                           Index Cond: ((title_type)::text = 'movie'::text)
                                                   ->  Index Scan using titleakas_pkey on titleakas  (cost=0.56..37.99 rows=37 width=10) (actual time=0.229..0.229 rows=1 loops=288751)
                                                         Index Cond: ((title_id)::text = (uh.title_id)::text)
                                                         Filter: ((region)::text = ANY ('{US,GB,ES,DE,FR,PT}'::text[]))
                                                         Rows Removed by Filter: 1
                                             ->  Nested Loop  (cost=0.70..2.03 rows=1 width=10) (actual time=0.091..0.091 rows=0 loops=174982)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..1.38 rows=4 width=14) (actual time=0.087..0.087 rows=1 loops=174982)
                                                         Index Cond: (title_id = (uh.title_id)::text)
                                                         Heap Fetches: 0
                                                   ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=241884)
                                                         Index Cond: (id = tg.genre_id)
                                                         Filter: ((name)::text = 'Drama'::text)
                                                         Rows Removed by Filter: 1
 Planning Time: 14.505 ms
 JIT:
   Functions: 114
   Options: Inlining false, Optimization false, Expressions true, Deforming true
   Timing: Generation 7.429 ms, Inlining 0.000 ms, Optimization 10.731 ms, Emission 195.461 ms, Total 213.621 ms
 Execution Time: 40585.881 ms
(54 rows)


explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1140968.73..1140968.98 rows=100 width=74) (actual time=22000.777..22000.929 rows=100 loops=1)
   ->  Sort  (cost=1140968.73..1141002.83 rows=13640 width=74) (actual time=21436.533..21436.678 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  Finalize GroupAggregate  (cost=126585.82..1140447.42 rows=13640 width=74) (actual time=6424.737..21434.540 rows=6235 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=126585.82..1140197.36 rows=11366 width=74) (actual time=6424.715..21431.126 rows=6966 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=125585.80..1137885.42 rows=5683 width=74) (actual time=6403.838..20882.753 rows=2322 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=125585.80..1137771.76 rows=5683 width=66) (actual time=6403.800..20881.094 rows=2585 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 84  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 80  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 78  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=125407.70..1137516.03 rows=5683 width=66) (actual time=6380.834..20877.141 rows=2585 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=125406.99..125407.09 rows=39 width=44) (actual time=6312.672..6314.463 rows=2676 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 350kB
                                             Worker 0:  Sort Method: quicksort  Memory: 336kB
                                             Worker 1:  Sort Method: quicksort  Memory: 332kB
                                             ->  Nested Loop  (cost=1.59..125405.96 rows=39 width=44) (actual time=291.232..6306.781 rows=2676 loops=3)
                                                   ->  Nested Loop  (cost=1.30..125341.72 rows=40 width=48) (actual time=291.185..6276.982 rows=2701 loops=3)
                                                         ->  Nested Loop  (cost=0.87..124389.39 rows=1696 width=18) (actual time=290.065..5035.237 rows=2819 loops=3)
                                                               ->  Nested Loop  (cost=0.43..123018.74 rows=2835 width=24) (actual time=288.937..3194.548 rows=3926 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111331.04 rows=2835 width=14) (actual time=287.790..1922.989 rows=3926 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1996705
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.12 rows=1 width=10) (actual time=0.322..0.322 rows=1 loops=11777)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.467..0.467 rows=1 loops=11777)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.438..0.438 rows=1 loops=8456)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..1.61 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=8104)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..961260.64 rows=4063329 width=42) (actual time=0.801..13468.026 rows=9377195 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834474.73 rows=15198860 width=17) (actual time=0.771..7177.266 rows=15197233 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462079.46 rows=15198860 width=14) (actual time=0.709..2262.904 rows=15197233 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45591700)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15197335  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15196504  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.003..0.003 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 15.944 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.197 ms, Inlining 273.445 ms, Optimization 659.172 ms, Emission 494.223 ms, Total 1435.038 ms
 Execution Time: 22360.135 ms
(65 rows)


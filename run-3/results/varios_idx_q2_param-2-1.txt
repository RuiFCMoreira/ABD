explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=970776.00..970776.25 rows=100 width=74) (actual time=23475.943..23476.099 rows=100 loops=1)
   ->  Sort  (cost=970776.00..970810.47 rows=13787 width=74) (actual time=22668.258..22668.407 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  Finalize GroupAggregate  (cost=118325.70..970249.07 rows=13787 width=74) (actual time=7542.595..22666.190 rows=6078 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=118325.70..969996.30 rows=11490 width=74) (actual time=7542.551..22662.566 rows=6788 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=117325.67..967670.05 rows=5745 width=74) (actual time=7519.998..22047.946 rows=2263 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=117325.67..967555.15 rows=5745 width=66) (actual time=7519.960..22046.267 rows=2510 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 80  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 76  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 79  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=117177.69..967296.62 rows=5745 width=66) (actual time=7497.595..22042.054 rows=2510 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=117176.98..117177.08 rows=39 width=44) (actual time=7427.394..7429.499 rows=2598 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 338kB
                                             Worker 0:  Sort Method: quicksort  Memory: 326kB
                                             Worker 1:  Sort Method: quicksort  Memory: 332kB
                                             ->  Nested Loop  (cost=1.16..117175.95 rows=39 width=44) (actual time=314.522..7420.840 rows=2598 loops=3)
                                                   ->  Nested Loop  (cost=0.87..117148.69 rows=39 width=48) (actual time=314.463..7378.116 rows=2623 loops=3)
                                                         ->  Nested Loop  (cost=0.87..117061.71 rows=1716 width=18) (actual time=313.379..5721.470 rows=2737 loops=3)
                                                               ->  Nested Loop  (cost=0.43..115751.97 rows=2847 width=24) (actual time=311.611..3747.860 rows=3815 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111330.34 rows=2847 width=14) (actual time=310.125..2251.506 rows=3815 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1996815
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..1.55 rows=1 width=10) (actual time=0.389..0.389 rows=1 loops=11446)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.46 rows=1 width=24) (actual time=0.514..0.514 rows=1 loops=11446)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_hash on title t  (cost=0.00..0.05 rows=1 width=30) (actual time=0.602..0.602 rows=1 loops=8211)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Rows Removed by Index Recheck: 0
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..0.70 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=7868)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..798331.73 rows=4138392 width=42) (actual time=1.309..13661.173 rows=9375093 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..670607.53 rows=15198860 width=17) (actual time=1.275..7428.881 rows=15193863 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..298212.26 rows=15198860 width=14) (actual time=1.187..2709.780 rows=15193863 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45581588)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15186028  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.004..0.004 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 30.645 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 10.770 ms, Inlining 340.046 ms, Optimization 829.482 ms, Emission 568.367 ms, Total 1748.665 ms
 Execution Time: 23889.602 ms
(66 rows)


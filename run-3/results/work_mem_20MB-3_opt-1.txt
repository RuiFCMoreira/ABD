explain analyze SELECT n.id,
    n.primary_name,
    date_part('year', NOW())::int - n.birth_year AS age,
    count(*) AS roles
FROM name n
JOIN titlePrincipals tp ON tp.name_id = n.id
JOIN titlePrincipalsCharacters tpc ON tpc.title_id = tp.title_id
    AND tpc.name_id = tp.name_id
JOIN category c ON c.id = tp.category_id
JOIN title t ON t.id = tp.title_id
WHERE t.start_year >= date_part('year', NOW())::int - 10
    AND c.name = 'actress'
    AND n.death_year IS NULL
    AND t.title_type IN (
        'movie', 'tvSeries', 'tvMiniSeries', 'tvMovie'
    )
GROUP BY n.id
ORDER BY roles DESC
LIMIT 100;
                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1238294.60..1238294.63 rows=12 width=36) (actual time=24639.009..24661.055 rows=100 loops=1)
   ->  Sort  (cost=1238294.60..1238294.63 rows=12 width=36) (actual time=24168.880..24190.919 rows=100 loops=1)
         Sort Key: (count(*)) DESC
         Sort Method: top-N heapsort  Memory: 38kB
         ->  Finalize GroupAggregate  (cost=1238292.85..1238294.38 rows=12 width=36) (actual time=23904.700..24152.702 rows=183837 loops=1)
               Group Key: n.id
               ->  Gather Merge  (cost=1238292.85..1238294.09 rows=10 width=36) (actual time=23904.641..24058.533 rows=249973 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=1237292.83..1237292.92 rows=5 width=36) (actual time=23873.971..23944.640 rows=83324 loops=3)
                           Group Key: n.id
                           ->  Sort  (cost=1237292.83..1237292.84 rows=5 width=28) (actual time=23873.913..23899.836 rows=132116 loops=3)
                                 Sort Key: n.id
                                 Sort Method: quicksort  Memory: 13256kB
                                 Worker 0:  Sort Method: quicksort  Memory: 15078kB
                                 Worker 1:  Sort Method: quicksort  Memory: 15131kB
                                 ->  Nested Loop  (cost=233484.16..1237292.77 rows=5 width=28) (actual time=2685.882..23647.127 rows=132116 loops=3)
                                       ->  Nested Loop  (cost=233483.60..1237272.08 rows=5 width=20) (actual time=2662.761..13871.130 rows=132656 loops=3)
                                             ->  Hash Join  (cost=233483.03..997482.78 rows=90023 width=30) (actual time=2661.694..9987.357 rows=149480 loops=3)
                                                   Hash Cond: (tp.category_id = c.id)
                                                   ->  Parallel Hash Join  (cost=233481.87..993644.39 rows=1080273 width=34) (actual time=2375.111..9665.157 rows=766313 loops=3)
                                                         Hash Cond: ((tp.title_id)::text = (t.id)::text)
                                                         ->  Parallel Seq Scan on titleprincipals tp  (cost=0.00..699000.00 rows=23300000 width=24) (actual time=0.484..4451.218 rows=18639969 loops=3)
                                                         ->  Parallel Hash  (cost=231110.60..231110.60 rows=189702 width=10) (actual time=2332.959..2332.961 rows=117416 loops=3)
                                                               Buckets: 524288  Batches: 1  Memory Usage: 20704kB
                                                               ->  Parallel Seq Scan on title t  (cost=0.00..231110.60 rows=189702 width=10) (actual time=8.740..2273.950 rows=117416 loops=3)
                                                                     Filter: (((title_type)::text = ANY ('{movie,tvSeries,tvMiniSeries,tvMovie}'::text[])) AND (start_year >= ((date_part('year'::text, now()))::integer - 10)))
                                                                     Rows Removed by Filter: 3156125
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=222.264..222.265 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on category c  (cost=0.00..1.15 rows=1 width=4) (actual time=222.247..222.249 rows=1 loops=3)
                                                               Filter: ((name)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                             ->  Index Only Scan using titleprincipalscharacters_pkey on titleprincipalscharacters tpc  (cost=0.56..2.65 rows=1 width=20) (actual time=0.025..0.025 rows=1 loops=448441)
                                                   Index Cond: ((title_id = (tp.title_id)::text) AND (name_id = (tp.name_id)::text))
                                                   Heap Fetches: 0
                                       ->  Index Scan using name_pkey on name n  (cost=0.56..4.14 rows=1 width=28) (actual time=0.073..0.073 rows=1 loops=397968)
                                             Index Cond: ((id)::text = (tp.name_id)::text)
                                             Filter: (death_year IS NULL)
                                             Rows Removed by Filter: 0
 Planning Time: 19.654 ms
 JIT:
   Functions: 115
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 6.522 ms, Inlining 273.044 ms, Optimization 489.513 ms, Emission 374.830 ms, Total 1143.909 ms
 Execution Time: 25016.205 ms
(46 rows)


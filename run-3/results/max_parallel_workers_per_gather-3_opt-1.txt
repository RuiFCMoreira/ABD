explain analyze SELECT n.id,
    n.primary_name,
    date_part('year', NOW())::int - n.birth_year AS age,
    count(*) AS roles
FROM name n
JOIN titlePrincipals tp ON tp.name_id = n.id
JOIN titlePrincipalsCharacters tpc ON tpc.title_id = tp.title_id
    AND tpc.name_id = tp.name_id
JOIN category c ON c.id = tp.category_id
JOIN title t ON t.id = tp.title_id
WHERE t.start_year >= date_part('year', NOW())::int - 10
    AND c.name = 'actress'
    AND n.death_year IS NULL
    AND t.title_type IN (
        'movie', 'tvSeries', 'tvMiniSeries', 'tvMovie'
    )
GROUP BY n.id
ORDER BY roles DESC
LIMIT 100;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1002256.99..1002257.02 rows=12 width=36) (actual time=24704.924..24785.803 rows=100 loops=1)
   ->  Sort  (cost=1002256.99..1002257.02 rows=12 width=36) (actual time=24232.202..24313.073 rows=100 loops=1)
         Sort Key: (count(*)) DESC
         Sort Method: top-N heapsort  Memory: 38kB
         ->  GroupAggregate  (cost=1002256.44..1002256.77 rows=12 width=36) (actual time=23941.775..24274.847 rows=183837 loops=1)
               Group Key: n.id
               ->  Sort  (cost=1002256.44..1002256.47 rows=12 width=28) (actual time=23941.721..24153.746 rows=396348 loops=1)
                     Sort Key: n.id
                     Sort Method: external merge  Disk: 14312kB
                     ->  Gather  (cost=189047.19..1002256.23 rows=12 width=28) (actual time=9216.947..23505.230 rows=396348 loops=1)
                           Workers Planned: 4
                           Workers Launched: 4
                           ->  Nested Loop  (cost=188047.19..1001255.03 rows=3 width=28) (actual time=9188.431..23729.071 rows=79270 loops=5)
                                 ->  Nested Loop  (cost=188046.63..1001242.62 rows=3 width=20) (actual time=9187.176..16612.127 rows=79594 loops=5)
                                       ->  Parallel Hash Join  (cost=188046.07..860759.32 rows=52741 width=30) (actual time=9186.024..9599.704 rows=89688 loops=5)
                                             Hash Cond: ((tp.title_id)::text = (t.id)::text)
                                             ->  Hash Join  (cost=1.16..655459.29 rows=1165000 width=20) (actual time=0.764..6504.353 rows=1911535 loops=5)
                                                   Hash Cond: (tp.category_id = c.id)
                                                   ->  Parallel Seq Scan on titleprincipals tp  (cost=0.00..605800.00 rows=13980000 width=24) (actual time=0.627..5077.685 rows=11183981 loops=5)
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.065..0.067 rows=1 loops=5)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on category c  (cost=0.00..1.15 rows=1 width=4) (actual time=0.054..0.055 rows=1 loops=5)
                                                               Filter: ((name)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                             ->  Parallel Hash  (cost=186112.46..186112.46 rows=111156 width=10) (actual time=2070.061..2070.062 rows=70450 loops=5)
                                                   Buckets: 131072  Batches: 8  Memory Usage: 3200kB
                                                   ->  Parallel Seq Scan on title t  (cost=0.00..186112.46 rows=111156 width=10) (actual time=304.901..2040.701 rows=70450 loops=5)
                                                         Filter: (((title_type)::text = ANY ('{movie,tvSeries,tvMiniSeries,tvMovie}'::text[])) AND (start_year >= ((date_part('year'::text, now()))::integer - 10)))
                                                         Rows Removed by Filter: 1893675
                                       ->  Index Only Scan using titleprincipalscharacters_pkey on titleprincipalscharacters tpc  (cost=0.56..2.65 rows=1 width=20) (actual time=0.077..0.077 rows=1 loops=448441)
                                             Index Cond: ((title_id = (tp.title_id)::text) AND (name_id = (tp.name_id)::text))
                                             Heap Fetches: 0
                                 ->  Index Scan using name_pkey on name n  (cost=0.56..4.14 rows=1 width=28) (actual time=0.088..0.088 rows=1 loops=397968)
                                       Index Cond: ((id)::text = (tp.name_id)::text)
                                       Filter: (death_year IS NULL)
                                       Rows Removed by Filter: 0
 Planning Time: 21.750 ms
 JIT:
   Functions: 170
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 10.742 ms, Inlining 479.447 ms, Optimization 810.011 ms, Emission 594.299 ms, Total 1894.499 ms
 Execution Time: 25188.349 ms
(42 rows)


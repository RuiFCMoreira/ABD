explain analyze SELECT t.id, t.primary_title, tg.genres, te.season_number, count(*) AS views
FROM title t
JOIN titleEpisode te ON te.parent_title_id = t.id
JOIN title t2 ON t2.id = te.title_id
JOIN userHistory uh ON uh.title_id = t2.id
JOIN users u ON u.id = uh.user_id
JOIN (
    SELECT tg.title_id, array_agg(g.name) AS genres
    FROM titleGenre tg
    JOIN genre g ON g.id = tg.genre_id
    GROUP BY tg.title_id
) tg ON tg.title_id = t.id
WHERE t.title_type = 'tvSeries'
    AND uh.last_seen BETWEEN NOW() - INTERVAL '30 days' AND NOW()
    AND te.season_number IS NOT NULL
    AND u.country_code NOT IN ('US', 'GB')
GROUP BY t.id, t.primary_title, tg.genres, te.season_number
ORDER BY count(*) DESC, t.id
LIMIT 100;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1133106.69..1133106.94 rows=100 width=74) (actual time=22695.697..22695.841 rows=100 loops=1)
   ->  Sort  (cost=1133106.69..1133122.48 rows=6315 width=74) (actual time=22111.222..22111.358 rows=100 loops=1)
         Sort Key: (count(*)) DESC, t.id
         Sort Method: top-N heapsort  Memory: 41kB
         ->  Finalize GroupAggregate  (cost=118898.34..1132865.34 rows=6315 width=74) (actual time=6444.826..22109.308 rows=5321 loops=1)
               Group Key: t.id, (array_agg(g.name)), te.season_number
               ->  Gather Merge  (cost=118898.34..1132749.57 rows=5262 width=74) (actual time=6444.784..22106.034 rows=5904 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Partial GroupAggregate  (cost=117898.32..1131142.18 rows=2631 width=74) (actual time=6418.184..21347.971 rows=1968 loops=3)
                           Group Key: t.id, (array_agg(g.name)), te.season_number
                           ->  Incremental Sort  (cost=117898.32..1131089.56 rows=2631 width=66) (actual time=6418.146..21346.507 rows=2148 loops=3)
                                 Sort Key: t.id, (array_agg(g.name)), te.season_number
                                 Presorted Key: t.id
                                 Full-sort Groups: 69  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 0:  Full-sort Groups: 65  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 Worker 1:  Full-sort Groups: 67  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
                                 ->  Merge Join  (cost=117513.11..1130971.16 rows=2631 width=66) (actual time=6393.351..21342.574 rows=2148 loops=3)
                                       Merge Cond: ((te.parent_title_id)::text = (tg.title_id)::text)
                                       ->  Sort  (cost=117512.40..117512.45 rows=18 width=44) (actual time=6318.712..6320.435 rows=2226 loops=3)
                                             Sort Key: t.id
                                             Sort Method: quicksort  Memory: 305kB
                                             Worker 0:  Sort Method: quicksort  Memory: 292kB
                                             Worker 1:  Sort Method: quicksort  Memory: 298kB
                                             ->  Nested Loop  (cost=1.59..117512.03 rows=18 width=44) (actual time=306.027..6313.610 rows=2226 loops=3)
                                                   ->  Nested Loop  (cost=1.30..117458.21 rows=18 width=48) (actual time=305.961..6279.733 rows=2247 loops=3)
                                                         ->  Nested Loop  (cost=0.87..117054.46 rows=720 width=18) (actual time=304.948..5097.715 rows=2345 loops=3)
                                                               ->  Nested Loop  (cost=0.43..116476.73 rows=1195 width=24) (actual time=303.343..3377.066 rows=3257 loops=3)
                                                                     ->  Parallel Seq Scan on userhistory uh  (cost=0.00..111329.39 rows=1195 width=14) (actual time=302.456..2192.555 rows=3257 loops=3)
                                                                           Filter: ((last_seen <= now()) AND (last_seen >= (now() - '30 days'::interval)))
                                                                           Rows Removed by Filter: 1997373
                                                                     ->  Index Only Scan using title_pkey on title t2  (cost=0.43..4.31 rows=1 width=10) (actual time=0.361..0.361 rows=1 loops=9772)
                                                                           Index Cond: (id = (uh.title_id)::text)
                                                                           Heap Fetches: 0
                                                               ->  Index Scan using titleepisode_pkey on titleepisode te  (cost=0.43..0.48 rows=1 width=24) (actual time=0.526..0.526 rows=1 loops=9772)
                                                                     Index Cond: ((title_id)::text = (t2.id)::text)
                                                                     Filter: (season_number IS NOT NULL)
                                                                     Rows Removed by Filter: 0
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.56 rows=1 width=30) (actual time=0.501..0.501 rows=1 loops=7035)
                                                               Index Cond: ((id)::text = (te.parent_title_id)::text)
                                                               Filter: ((title_type)::text = 'tvSeries'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using users_pkey on users u  (cost=0.29..2.99 rows=1 width=4) (actual time=0.012..0.012 rows=1 loops=6742)
                                                         Index Cond: (id = uh.user_id)
                                                         Filter: ((country_code)::text <> ALL ('{US,GB}'::text[]))
                                                         Rows Removed by Filter: 0
                                       ->  GroupAggregate  (cost=0.71..961941.37 rows=4119269 width=42) (actual time=1.092..13868.796 rows=9377470 loops=3)
                                             Group Key: tg.title_id
                                             ->  Nested Loop  (cost=0.71..834458.28 rows=15198444 width=17) (actual time=1.059..7472.727 rows=15197632 loops=3)
                                                   ->  Index Only Scan using titlegenre_pkey on titlegenre tg  (cost=0.56..462073.22 rows=15198444 width=14) (actual time=0.996..2683.585 rows=15197632 loops=3)
                                                         Heap Fetches: 0
                                                   ->  Memoize  (cost=0.15..0.17 rows=1 width=11) (actual time=0.000..0.000 rows=1 loops=45592895)
                                                         Cache Key: tg.genre_id
                                                         Cache Mode: logical
                                                         Hits: 15197777  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 0:  Hits: 15197335  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         Worker 1:  Hits: 15197699  Misses: 28  Evictions: 0  Overflows: 0  Memory Usage: 4kB
                                                         ->  Index Scan using genre_pkey on genre g  (cost=0.14..0.16 rows=1 width=11) (actual time=0.003..0.003 rows=1 loops=84)
                                                               Index Cond: (id = tg.genre_id)
 Planning Time: 15.209 ms
 JIT:
   Functions: 148
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 8.847 ms, Inlining 285.748 ms, Optimization 685.412 ms, Emission 520.251 ms, Total 1500.258 ms
 Execution Time: 23072.045 ms
(65 rows)

